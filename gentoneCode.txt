private double duration = 0.03; // the length of the tone, fix it to 0.03 second
private double freqOfTone = 16000.0;// frequency of the tone, in hz, if it is higher than 16K Hz, normally we can not hear it
    private int sampleRate = 44100; // use the max sample rate, should be at least twice of the freqOfTone
    private int numSamples = (int)(duration * sampleRate); // total number of samples
    private double sample[] = new double[numSamples];
    private final byte generatedSnd[] = new byte[2 * numSamples]; // store the 16 bit pcm data, this is the raw data format in Android, and may be not used in iphone

void genTone(){
			  // fill out the array
			  // the value of sample determine the volumn, sin fomular
			  for (int i = 0; i < numSamples; ++i) {
				  sample[i] = Math.sin(2 * Math.PI * i / (sampleRate/freqOfTone));
			  }
			 
			  // convert to 16 bit pcm sound array, each sample data is convert to a short (16bit) first, and then stored in two bytes (8 bit)
			  int idx = 0;
			  for (double dVal : sample) {
				   short val = (short) (dVal * 32767);
				   generatedSnd[idx++] = (byte) (val & 0x00ff);
				   generatedSnd[idx++] = (byte) ((val & 0xff00) >>> 8);
			  }
		}
